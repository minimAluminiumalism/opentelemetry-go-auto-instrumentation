// Copyright (c) 2025 Alibaba Group Holding Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.21.12
// source: api/weather/weather.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWeatherServiceGetWeatherMessage = "/api.weather.v1.WeatherService/GetWeatherMessage"

type WeatherServiceHTTPServer interface {
	GetWeatherMessage(context.Context, *GetWeatherMessageRequest) (*GetWeatherMessageResponse, error)
}

func RegisterWeatherServiceHTTPServer(s *http.Server, srv WeatherServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/weather/{city}/message", _WeatherService_GetWeatherMessage1_HTTP_Handler(srv))
}

func _WeatherService_GetWeatherMessage1_HTTP_Handler(srv WeatherServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWeatherMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWeatherServiceGetWeatherMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWeatherMessage(ctx, req.(*GetWeatherMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWeatherMessageResponse)
		return ctx.Result(200, reply)
	}
}

type WeatherServiceHTTPClient interface {
	GetWeatherMessage(ctx context.Context, req *GetWeatherMessageRequest, opts ...http.CallOption) (rsp *GetWeatherMessageResponse, err error)
}

type WeatherServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewWeatherServiceHTTPClient(client *http.Client) WeatherServiceHTTPClient {
	return &WeatherServiceHTTPClientImpl{client}
}

func (c *WeatherServiceHTTPClientImpl) GetWeatherMessage(ctx context.Context, in *GetWeatherMessageRequest, opts ...http.CallOption) (*GetWeatherMessageResponse, error) {
	var out GetWeatherMessageResponse
	pattern := "/v1/weather/{city}/message"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWeatherServiceGetWeatherMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
